name: Build, Push and Update Manifests

on:
  push:
    branches: [main, develop]

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.filter.outputs.changes }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Detect changed services
        uses: dorny/paths-filter@v3
        id: filter
        with:
          list-files: json
          filters: |
            frontend:
              - 'k-animator-project/frontend/**'
            auth:
              - 'k-animator-project/auth/**'
            model-api:
              - 'k-animator-project/model_api/**'
            model-worker:
              - 'k-animator-project/model_worker/**'
            utils:
              - 'k-animator-project/utils/**'
  
  build-and-push:
    needs: changes
    if: ${{ needs.changes.outputs.services != '[]' }}
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        service: ${{ fromJson(needs.changes.outputs.services) }}
        
    outputs:
      build_data: ${{ steps.prepare-output.outputs.build_data }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.WOOSUNG142 }}

      - name: Generate Docker tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/k-animator/${{ matrix.service }}
          tags: |
            type=sha,prefix={{branch}}-,format=short

      - name: Set Docker build context and file path
        id: set-context
        run: |
          SERVICE_NAME="${{ matrix.service }}"
          SERVICE_PATH=""
          case "$SERVICE_NAME" in
            "frontend")     SERVICE_PATH="k-animator-project/frontend" ;;
            "auth")         SERVICE_PATH="k-animator-project/auth" ;;
            "model-api")    SERVICE_PATH="k-animator-project/model_api" ;;
            "model-worker") SERVICE_PATH="k-animator-project/model_worker" ;;
            "utils")         SERVICE_PATH="k-animator-project/utils" ;;
            *)
              echo "::error::Unknown service name: $SERVICE_NAME"
              exit 1
              ;;
          esac
          echo "path=${SERVICE_PATH}" >> $GITHUB_OUTPUT
      
      - name: Build and Push image to GHCR
        uses: docker/build-push-action@v6
        with:
          context: ./k-animator-project
          file: ${{ steps.set-context.outputs.path }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          no-cache: true

      - name: Prepare build data for this job
        id: prepare-output
        run: |
          JSON_STRING=$(jq -c -n --arg service "${{ matrix.service }}" --arg tag "${{ steps.meta.outputs.tags }}" '{service: $service, tag: $tag}')
          {
            echo "build_data<<EOF"
            echo "$JSON_STRING"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

  update-manifests:
    needs: [build-and-push]
    if: always() && needs.build-and-push.result == 'success'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.WOOSUNG142 }}

      - name: Update Kustomize Manifest
        env:
          BUILD_DATA_JSON: ${{ toJSON(needs.build-and-push.outputs.build_data) }}
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          BRANCH_NAME="${{ github.ref_name }}"
          if [[ "$BRANCH_NAME" == "main" ]]; then
            KUSTOMIZE_PATH="k8s/manifests/overlays/production/kustomization.yaml"
          else
            KUSTOMIZE_PATH="k8s/manifests/overlays/development/kustomization.yaml"
          fi

          wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          chmod a+x /usr/local/bin/yq

          echo "Received build data array:"
          echo "${BUILD_DATA_JSON}"

          echo "${BUILD_DATA_JSON}" | jq -r '.[] | fromjson | @base64' | while IFS= read -r b64; do
            JSON_STRING=$(echo "$b64" | base64 --decode)
            SERVICE=$(echo "$JSON_STRING" | jq -r '.service')
            IMAGE_TAG=$(echo "$JSON_STRING" | jq -r '.tag')
            
            echo "--- Updating ---"
            echo "Service: ${SERVICE}"
            echo "New Tag: ${IMAGE_TAG}"
            echo "File: ${KUSTOMIZE_PATH}"
            echo "----------------"

            yq e "(.images[] | select(.name == \"ghcr.io/${{ github.repository_owner }}/k-animator/${SERVICE}\")).newTag = \"${IMAGE_TAG}\"" -i ${KUSTOMIZE_PATH}
          done

          echo "--- Checking for file changes ---"
          git status
          echo "--- Displaying diff for ${KUSTOMIZE_PATH} ---"
          git diff ${KUSTOMIZE_PATH}

          if ! git diff --quiet ${KUSTOMIZE_PATH}; then
            git add ${KUSTOMIZE_PATH}
            git commit -m "ci: Update image tags for changed services on ${{ github.ref_name }}"
            git pull --rebase
            git push
          else
            echo "No changes to commit in ${KUSTOMIZE_PATH}."
          fi

